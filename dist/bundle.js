!function(t){var e={};function n(s){if(e[s])return e[s].exports;var r=e[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,s){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(s,r,function(e){return t[e]}.bind(null,r));return s},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=n(1);e.BaseCanvas=class extends s.Vector2{constructor(t,e,n,s){super(t,e),this.theCanvas=document.createElement("canvas"),this.theCanvas.id=n,this.ctx=this.GetCanvasContext2D(this.theCanvas),this.theCanvas.height=this.GetHeight(),this.theCanvas.width=this.GetWidth(),s.append(this.theCanvas)}Draw(){return this.ctx.fillStyle="#A9A9A9",this.ctx.fillRect(0,0,this.GetWidth(),this.GetHeight()),this.ctx.fillStyle="#0000ff",this.ctx.fillRect(10,10,100,100),this.ctx}GreedyClearCanvas(){this.ctx.clearRect(0,0,this.GetWidth(),this.GetHeight())}GetCanvasContext2D(t){return t.getContext("2d")}GetWidth(){return this.x}GetHeight(){return this.y}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Vector2=class{constructor(t,e){this.x=t,this.y=e}concat(){return"x:["+this.x+"], y:["+this.y+"]"}getValueX(){return this.x}getValueY(){return this.y}setValueX(t){this.x=t}setValueY(t){this.y=t}setValues(t,e){this.x=t,this.y=e}}},function(t,e,n){t.exports=n(3)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=n(4);class r{start(){(new s.Main).Run(500)}}e.App=r,(new r).start()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=n(5),r=n(9);e.Main=class{constructor(){this.loopCount=0,this.launchMessage="Start",this.canvasManager=new s.CanvasManager,this.inputManager=new r.InputManager}Run(t){this.Start(),setInterval(()=>{this.Loop(),this.loopCount++},t)}Start(){return console.log(this.launchMessage+" will now be posted to the document "),this.inputManager.InitInputManager(),this.canvasManager.InitCanvasManager(),this.launchMessage}Loop(){this.inputManager.NewInputLoopCheck(),this.canvasManager.Draw()}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=n(6),r=n(8);e.CanvasManager=class{constructor(){}InitCanvasManager(){this.mainDiv=document.createElement("div"),this.mainDiv.id="main_div",document.body.appendChild(this.mainDiv);const t=document.getElementById("main_div");this.DrawableVector=r.ViewportHelper.GetSquareInBrowser(),this.parentCanvas=new s.ParentCanvas(this.DrawableVector.x,this.DrawableVector.y,"parent",t),this.parentCanvas.RegisterChildCanvas(this.DrawableVector.x,this.DrawableVector.y)}Draw(){this.parentCanvas.Draw()}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=n(0),r=n(7);e.ParentCanvas=class extends s.BaseCanvas{constructor(t,e,n,s){super(t,e,n,s),this.children=new Array}RegisterChildCanvas(t,e){const n="child_canvas_"+(this.children.length+1);console.log("registering a new canvas with ID [ "+n+"]");const s=new r.ChildCanvas(t,e,n,this.theCanvas);this.children.push(s)}Draw(){console.log("draw called from parent");for(const t of this.children){const e=t.Draw();this.ctx.drawImage(e.canvas,0,0)}return this.ctx}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=n(0);e.ChildCanvas=class extends s.BaseCanvas{Draw(){return console.log("called from child"),super.Draw()}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=n(1);e.ViewportHelper=class{static GetSquareInBrowser(){const t=this.GetBrowserHeight(),e=this.GetBrowserWidth(),n=new s.Vector2(0,0);return t<e?n.setValues(t,t):n.setValues(e,e),n}static GetBrowserWidth(){return window.innerWidth}static GetBrowserHeight(){return window.innerHeight}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class s{constructor(){this.currentInputs=new Array}NewInputLoopCheck(){}InitInputManager(){document.addEventListener("keydown",t=>{console.log("key is pressed")})}checkKeyPressIsValid(t){for(let e=0;e<s.validInputs.length;e++)if(s.validInputs[e]===t)return console.log("key "+t+" is pressed"),!0;return!1}}s.validInputs=["w","a","s","d"," "],e.InputManager=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,