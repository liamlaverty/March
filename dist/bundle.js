!function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(r,s,function(t){return e[t]}.bind(null,s));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Vector2=class{constructor(e,t){this.x=e,this.y=t}concat(){return"x:["+this.x+"], y:["+this.y+"]"}getValueX(){return this.x}getValueY(){return this.y}setValueX(e){this.x=e}setValueY(e){this.y=e}setValues(e,t){this.x=e,this.y=t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(8),a=n(9);t.BaseCanvas=class extends r.Vector2{constructor(e,t,n,r){super(e,t),this.theCanvas=document.createElement("canvas"),this.theCanvas.id=n,this.ctx=this.GetCanvasContext2D(this.theCanvas),this.theCanvas.height=this.GetHeight(),this.theCanvas.width=this.GetWidth(),r.append(this.theCanvas)}Draw(){const e=s.RandomNumberGenerator.GetRandomVector2(0,this.getValueX(),0,this.getValueY());return this.ctx.fillStyle=a.RandomStringGenerator.GetRandomHexColour(),this.ctx.fillRect(e.x,e.y,10,10),this.ctx}GreedyClearCanvas(){console.log("greedy clearing"),this.ctx.clearRect(0,0,this.GetWidth(),this.GetHeight())}GetCanvasContext2D(e){return e.getContext("2d")}GetWidth(){return this.getValueX()}GetHeight(){return this.getValueY()}}},function(e,t,n){e.exports=n(3)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4);class s{start(){(new r.Main).Run(50)}}t.App=s,(new s).start()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5),s=n(6);t.Main=class{constructor(){this.loopCount=0,this.launchMessage="Start",this.canvasManager=new s.CanvasManager,this.inputManager=new r.InputManager}Run(e){this.Start(),setInterval(()=>{this.Loop(),this.loopCount++},e)}Start(){return console.log(this.launchMessage+" will now be posted to the document "),this.inputManager.InitInputManager(),this.canvasManager.InitCanvasManager(),this.launchMessage}Loop(){this.inputManager.NewInputLoopCheck(),this.canvasManager.Draw()}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r{constructor(){this.currentInputs=new Array}NewInputLoopCheck(){}InitInputManager(){document.addEventListener("keydown",e=>{console.log("key is pressed")})}checkKeyPressIsValid(e){for(let t=0;t<r.validInputs.length;t++)if(r.validInputs[t]===e)return console.log("key "+e+" is pressed"),!0;return!1}}r.validInputs=["w","a","s","d"," "],t.InputManager=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(7),s=n(11);t.CanvasManager=class{constructor(){}InitCanvasManager(){this.mainDiv=document.createElement("div"),this.mainDiv.id="main_div",document.body.appendChild(this.mainDiv);const e=document.getElementById("main_div");this.DrawableVector=s.ViewportHelper.GetSquareInBrowser(),this.parentCanvas=new r.ParentCanvas(this.DrawableVector.x,this.DrawableVector.y,"parent",e);for(let e=0;e<10;e++)this.parentCanvas.RegisterChildCanvas(this.DrawableVector.x,this.DrawableVector.y)}Draw(){this.parentCanvas.Draw()}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1),s=n(10);t.ParentCanvas=class extends r.BaseCanvas{constructor(e,t,n,r){super(e,t,n,r),this.children=new Array}RegisterChildCanvas(e,t){const n="child_canvas_"+(this.children.length+1);console.log("registering a new canvas with ID [ "+n+"]");const r=new s.ChildCanvas(e,t,n,this.theCanvas);this.children.push(r)}Draw(){this.GreedyClearCanvas();for(const e of this.children){const t=e.Draw();this.ctx.drawImage(t.canvas,0,0)}return this.ctx}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.RandomNumberGenerator=class{static GetRandomNumber(e,t){return Math.floor(Math.random()*(t-e+1)+e)}static GetRandomVector2(e,t,n,s){return new r.Vector2(this.GetRandomNumber(e,t),this.GetRandomNumber(n,s))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.RandomStringGenerator=class{static GetRandomHexColour(){return"#"+(16777215*Math.random()<<0).toString(16)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);t.ChildCanvas=class extends r.BaseCanvas{Draw(){return this.GreedyClearCanvas(),super.Draw()}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.ViewportHelper=class{static GetSquareInBrowser(){const e=this.GetBrowserHeight(),t=this.GetBrowserWidth(),n=new r.Vector2(0,0);return e<t?n.setValues(e,e):n.setValues(t,t),n}static GetBrowserWidth(){return window.innerWidth}static GetBrowserHeight(){return window.innerHeight}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,