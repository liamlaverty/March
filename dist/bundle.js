!function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(r,s,function(t){return e[t]}.bind(null,s));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2);class s{start(){(new r.Main).Run(500)}}t.App=s,(new s).start()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3),s=n(5);t.Main=class{constructor(){this.loopCount=0,this.launchMessage="Start",this.canvasManager=new r.CanvasManager,this.inputManager=new s.InputManager}Run(e){this.Start(),setInterval(()=>{this.Loop(),this.loopCount++},e)}Start(){return console.log(this.launchMessage+" will now be posted to the document "),this.inputManager.InitInputManager(),this.canvasManager.InitCanvasManager(),this.launchMessage}Loop(){this.inputManager.NewInputLoopCheck(),this.canvasManager.DrawCanvas()}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4);t.CanvasManager=class{constructor(){}InitCanvasManager(){this.theCanvas=document.createElement("canvas"),this.theCanvas.id="workingCanvas",this.ctx=this.GetCanvasContext2D(this.theCanvas),this.DrawableVector=this.GetSquareInBrowser(),this.theCanvas.height=this.DrawableVector.x,this.theCanvas.width=this.DrawableVector.y,console.log("canvas size is "+this.DrawableVector.concat())}GetBrowserWidth(){return window.innerWidth}GetBrowserHeight(){return window.innerHeight}GetSquareInBrowser(){const e=this.GetBrowserHeight(),t=this.GetBrowserWidth(),n=new r.Vector2(0,0);return e<t?n.setValues(e,e):n.setValues(t,t),n}DrawCanvas(){this.ctx.fillStyle="green",this.ctx.fillRect(10,10,100,100),document.body.appendChild(this.theCanvas)}GetCanvasContext2D(e){return e.getContext("2d")}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Vector2=class{constructor(e,t){this.x=e,this.y=t}concat(){return"x:["+this.x+"], y:["+this.y+"]"}getValueX(){return this.x}getValueY(){return this.y}setValueX(e){this.x=e}setValueY(e){this.y=e}setValues(e,t){this.x=e,this.y=t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r{constructor(){this.currentInputs=new Array}NewInputLoopCheck(){}InitInputManager(){document.addEventListener("keydown",e=>{console.log("key is pressed")})}checkKeyPressIsValid(e){for(let t=0;t<r.validInputs.length;t++)if(r.validInputs[t]===e)return console.log("key "+e+" is pressed"),!0;return!1}}r.validInputs=["w","a","s","d"," "],t.InputManager=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,