!function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(a,r,function(t){return e[t]}.bind(null,r));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(2);class r{start(){(new a.Main).Run(500)}}t.App=r,(new r).start()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(3),r=n(4);t.Main=class{constructor(){this.loopCount=0,this.launchMessage="Start",this.canvasManager=new a.CanvasManager,this.inputManager=new r.InputManager}Run(e){this.Start(),setInterval(()=>{this.Loop(),this.loopCount++},e)}Start(){return console.log(this.launchMessage+" will now be posted to the document "),this.inputManager.InitInputManager(),this.canvasManager.InitCanvasManager(),this.launchMessage}Loop(){console.log("in loop. Rendering "+this.loopCount),this.inputManager.NewInputLoopCheck(),this.canvasManager.DrawCanvas()}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.CanvasManager=class{constructor(){}InitCanvasManager(){this.theCanvas=document.createElement("canvas")}DrawCanvas(){this.theCanvas.id="workingCanvas",this.theCanvas.height=400,this.theCanvas.width=400;const e=this.GetCanvasContext2D(this.theCanvas);e.fillStyle="green",e.fillRect(10,10,100,100),document.body.appendChild(this.theCanvas)}GetCanvasContext2D(e){return e.getContext("2d")}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a{constructor(){this.currentInputs=new Array}NewInputLoopCheck(){}InitInputManager(){document.addEventListener("keydown",e=>{console.log("key is pressed")})}checkKeyPressIsValid(e){for(let t=0;t<a.validInputs.length;t++)if(a.validInputs[t]===e)return!0;return!1}}a.validInputs=["w","a","s","d"," "],t.InputManager=a}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,